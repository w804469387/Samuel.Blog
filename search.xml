<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为什么要有development和production模式的区分打包</title>
      <link href="/2021/11/10/20211110-01/"/>
      <url>/2021/11/10/20211110-01/</url>
      
        <content type="html"><![CDATA[<h3 id="development（开发环境）"><a href="#development（开发环境）" class="headerlink" title="development（开发环境）"></a>development（开发环境）</h3><p>当我们在开发项目的时候，一般是用development环境进行项目的开发，在这个打包环境下，webpack中我们使用了devServer可以帮我们启用了一个服务器，然后这个服务器里还集成了一些HRM（热模块更新）这一类的特性。<br>只要我们更改了代码，它会帮我们重新打包，然后我们的代码的内容会实时的展示在服务器对应的网页上，所以在开发环境下，我们使用development模式会非常的方便。</p><hr><h3 id="production（生产环境）"><a href="#production（生产环境）" class="headerlink" title="production（生产环境）"></a>production（生产环境）</h3><p>一旦我们开发完成了，代码需要打包上线，这个时候就需要用production这个模式。</p><h5 id="production模式和development模式的主要差异有哪些呢？"><a href="#production模式和development模式的主要差异有哪些呢？" class="headerlink" title="production模式和development模式的主要差异有哪些呢？"></a>production模式和development模式的主要差异有哪些呢？</h5><p>开发环境中，source map是非常全的，这样可以在调试过程中快速定位问题。而生产环境中的source map不是那么重要了，就可以更加简洁一些，或者生产环境中的source map我们可以生成一个.map文件来进行存储<br>开发环境中，我们的代码一般打包生成之后，不需要进行压缩，因为在开发环境下，我们希望不压缩代码，可以看到打包生成的内容，比较明显的看到里边一些具体的说明项，但是一旦我们的代码要上线，我们的目标则转向于关注更小的打包生成文件，更轻量化的 source map，更优化的资源以改善加载时间。所以生产环境下打包出的代码一般都是压缩过的<br>开发环境(development)和生产环境(production)的构建目标差异很大，但是截至到现在位置，我们的webpack配置文件只有一个，那就是 webpack.config.js文件，<br>当我们在开发环境和生产环境下来回切换进行打包的时候，我们需要手动的去不停的修改webpack.config.js文件，<br>这就很麻烦了；</p><ul><li>比如开发环境下，我们需要修改为如下：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">mode<span class="token operator">:</span> 'development'devtool<span class="token operator">:</span>'cheap-module-eval-source-map'optimization<span class="token operator">:</span> <span class="token punctuation">{</span>      usedExports<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当开发完成以后，要打包生成线上文件，我们就要切换到生产环境了，我们需要修改为如下：(然后运行npx webpack进行打包)<pre class="line-numbers language-json" data-language="json"><code class="language-json">mode<span class="token operator">:</span> 'production'devtool<span class="token operator">:</span>'cheap-module-source-map'<span class="token comment">// optimization: {</span><span class="token comment">//     usedExports: true  </span><span class="token comment">// },</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="那要怎么解决这种麻烦呢？配置不同环境下的配置文件"><a href="#那要怎么解决这种麻烦呢？配置不同环境下的配置文件" class="headerlink" title="那要怎么解决这种麻烦呢？配置不同环境下的配置文件"></a>那要怎么解决这种麻烦呢？配置不同环境下的配置文件</h4></li></ul><ul><li>把原来的webpack.config.js修改为webpack.dev.js</li></ul><ul><li>新增一个生产环境下的配置文件webpack.prod.js,然后把webpack.dev.js里的代码复制一份过来，然后进行删改；打包线下的代码，首先mode要改为 production；然后 devtool要改为cheap-module-source-map；然后把devServer删除掉，因为打包生成线上代码的时候，我们只需要生成文件，上传到线上的服务器上就可以了，不想要devServer帮我生成一个服务起再启动服务器了；然后把热更新new webpack.HotModuleReplacementPlugin()也删除掉;还有就是要把 optimization也删除掉</li></ul><h2 id="总得来说"><a href="#总得来说" class="headerlink" title="总得来说"></a>总得来说</h2><h3 id="dev更适用与开发的时候减少编译速度，方便调试。"><a href="#dev更适用与开发的时候减少编译速度，方便调试。" class="headerlink" title="dev更适用与开发的时候减少编译速度，方便调试。"></a>dev更适用与开发的时候减少编译速度，方便调试。</h3><h3 id="prod-是生成-min的代码包用来发布到服务器上的"><a href="#prod-是生成-min的代码包用来发布到服务器上的" class="headerlink" title="prod 是生成.min的代码包用来发布到服务器上的"></a>prod 是生成.min的代码包用来发布到服务器上的</h3>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2021/11/10/Promise/"/>
      <url>/2021/11/10/Promise/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-Promise？"><a href="#什么是-Promise？" class="headerlink" title="什么是 Promise？"></a>什么是 Promise？</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。<br>它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。<br>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。<br>从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。<br>Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><h3 id="Promise-有什么优点？"><a href="#Promise-有什么优点？" class="headerlink" title="Promise 有什么优点？"></a>Promise 有什么优点？</h3><ol><li><p>对象的状态不受外界影响。<br>Promise 对象代表一个异步操作，有三种状态：<br>pending（进行中）、fulfilled（已成功）和 rejected（已失败）。<br>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>这也是 Promise 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<br>Promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled 和从 pending 变为 rejected。<br>只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。<br>如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。<br>这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></li></ol><h3 id="Promise-有什么缺点？"><a href="#Promise-有什么缺点？" class="headerlink" title="Promise 有什么缺点？"></a>Promise 有什么缺点？</h3><ul><li>首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</li><li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ul><h3 id="Promise-怎么用？"><a href="#Promise-怎么用？" class="headerlink" title="Promise 怎么用？"></a>Promise 怎么用？</h3><p>废话不多说直接上代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token comment">/*判断符合你的正确条件*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 成功的返回</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">//失败的返回</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们说了 Promise 有三种状态，pending（进行中）、fulfilled（已成功）和 rejected（已失败）。<br>就是说 你的方法一但被调用那么 promise 内当前的状态就是 pending（进行中），<br>resolve() 和 reject()<br>如果没有这两个方法，那么这个 Promise 就会一直处于 pending 的状态不会返回<br><strong>注意:这俩对象必须返回一个</strong></p><p><b>resolve</b>的作用就是把当前的 Promise 内的状态从 pending 改为 fulfilled(进行中-&gt;已成功),在异步操作成功时调用，并将异步操作的结果，作为参数传递出去;</p><p><b>reject</b>的作用就是把当前的 Promise 内的状态从 pending 改为 rejected(进行中-&gt;已失败,在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><h4 id="当-Promise-对象生成后我们可以获得成功或者失败的结果"><a href="#当-Promise-对象生成后我们可以获得成功或者失败的结果" class="headerlink" title="当 Promise 对象生成后我们可以获得成功或者失败的结果"></a>当 Promise 对象生成后我们可以获得成功或者失败的结果</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//返回成功的结果</span>    <span class="token comment">// result就是resolve传递的参数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// 同理 err就是reject传递的错误信息</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Promise-新建后就会立即执行"><a href="#Promise-新建后就会立即执行" class="headerlink" title="Promise 新建后就会立即执行"></a>Promise 新建后就会立即执行</h6><p>比如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> newPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"柳暗花明又一村"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"My name is Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他们输出的结果是什么呢？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//柳暗花明又一村</span><span class="token comment">// Hello word</span><span class="token comment">// My name is Promise</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>跟你心中的答案一样吗？</p><p>上面代码中，Promise 新建后立即执行，所以首先输出的是’柳暗花明又一村’。<br>然后，then 方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 resolved 最后输出。</p><h3 id="Promise-对-Ajax-的封装"><a href="#Promise-对-Ajax-的封装" class="headerlink" title="Promise 对 Ajax 的封装"></a>Promise 对 Ajax 的封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolce<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>    client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string">"/getjson"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获得的数据是："</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getJson出错了："</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，getJSON是对 XMLHttpRequest 对象的封装，<br>用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个Promise对象。</p><h3 id="如果有多个Promise对象怎么办？"><a href="#如果有多个Promise对象怎么办？" class="headerlink" title="如果有多个Promise对象怎么办？"></a>如果有多个Promise对象怎么办？</h3><p>这个时候可以用到Promise.all();<br>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ps <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面数组中传入的都是Promise对象,<br>这里ps的状态会受到a，b，c三个对象的影响，如果a,b,c三个都返回了fulfilled(成功的)<br>ps为成功，接收的是一个数组类型的值，由a,b,c三个返回值组成。<br>如果三个对象中有一个返回了rejected,会直接返回，<br>此时ps接收的为第一个返回rejected的值；</p><hr><hr><p>先更到这里</p><p>内容参考<a href="https://es6.ruanyifeng.com/">阮一峰ES6入门</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIt? Lv.1 和 Lv.99 只差这一步</title>
      <link href="/2021/11/10/git/"/>
      <url>/2021/11/10/git/</url>
      
        <content type="html"><![CDATA[<p>刚入行第一次接触 <b>Git</b> 的时候,只知道他是一个非常强大的代码管理工具，经过几年的捶打，总结一下吧，</p><hr><h3 id="提交错误到仓库的时候"><a href="#提交错误到仓库的时候" class="headerlink" title="提交错误到仓库的时候"></a>提交错误到仓库的时候</h3><h6 id="如果你在使用过程中，误操作或者是提交了一个-bug-到仓库了，这个时候可以使用"><a href="#如果你在使用过程中，误操作或者是提交了一个-bug-到仓库了，这个时候可以使用" class="headerlink" title="如果你在使用过程中，误操作或者是提交了一个 bug 到仓库了，这个时候可以使用"></a>如果你在使用过程中，误操作或者是提交了一个 bug 到仓库了，这个时候可以使用</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将看到你在 git 上提交的所有改动记录被列了出来，而且囊括了所有的分支，和已被删除的 commit 哦.<br>每一条记录都有一个类似 HEAD@{index} 的索引编号<br>找到在犯错前的那个提交记录的索引号，<br>然后执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD@<span class="token punctuation">{</span>index<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="提交后悔的时候"><a href="#提交后悔的时候" class="headerlink" title="提交后悔的时候"></a>提交后悔的时候</h3><h6 id="当你已经提交了-commit-后，才想起来还有一个地方没有修改，这咋整？？"><a href="#当你已经提交了-commit-后，才想起来还有一个地方没有修改，这咋整？？" class="headerlink" title="当你已经提交了 commit 后，才想起来还有一个地方没有修改，这咋整？？"></a>当你已经提交了 commit 后，才想起来还有一个地方没有修改，这咋整？？</h6><p>//千万别直接对公共的 commit 上进行修改，否则会让你知道什么社会</p><p>首先，添加下当前已改动的代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>//或者你可以添加指定的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，运行下面这条命令，它就会把你刚刚添加的代码合并到最后一次提交上了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>什么，你又觉得上次提交的不够好看，想改一下？<br>ok。可以，。（真事的….)<br>还是上面提到过的那条代码，运行一下，就可以重新写你想写的了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来放大招了：</p><p>如果 不小心把新分支的代码提交到主分支上了<br>别慌，稳住<br>首先我们先创建一个新的分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch some-new-branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把刚才的提交从主分支中移除：</p><pre class="line-numbers language-none"><code class="language-none">$ git reset HEAD~ --hard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要注意的是，这个操作只能回到最后一条操作上面，<br>什么？？？<br>如果你已跑到其它提交记录上怎么办？<br>没关系，你可以用 git reset HEAD@{number} 再跑回来。<br>然后在切回到新的分支上面</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout some-new-branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>概述</p><h3 id="提交错误的时候"><a href="#提交错误的时候" class="headerlink" title="提交错误的时候"></a>提交错误的时候</h3><h6 id="如果代码提交到错误的分支上了"><a href="#如果代码提交到错误的分支上了" class="headerlink" title="如果代码提交到错误的分支上了"></a>如果代码提交到错误的分支上了</h6><p>首先撤销这次提交，但保留变更代码：</p><pre class="line-numbers language-none"><code class="language-none">git reset HEAD~ --softgit stash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在切到正确的那个分支去</p><pre class="line-numbers language-none"><code class="language-none">git checkout name-of-the-correct-branchgit stash popgit add . # 或者你可以添加指定的文件git commit -m "your message here";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在 你的改动就在正确的分支上啦</p><h3 id="想看diff的时候"><a href="#想看diff的时候" class="headerlink" title="想看diff的时候"></a>想看diff的时候</h3><h6 id="我想用-diff-命令看下改动内容，但啥都没看到"><a href="#我想用-diff-命令看下改动内容，但啥都没看到" class="headerlink" title="我想用 diff 命令看下改动内容，但啥都没看到?!"></a>我想用 diff 命令看下改动内容，但啥都没看到?!</h6><p>如果对文件做了改动，但是通过 diff 命令却看不到，<br>那很可能是你执行过 add 命令将文件改动添加到了 暂存区 了。你需要添加下面这个参数。</p><pre class="line-numbers language-none"><code class="language-none">git diff --staged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，你会发现又可以看到了</p><h3 id="已经麻了的时候"><a href="#已经麻了的时候" class="headerlink" title="已经麻了的时候"></a>已经麻了的时候</h3><h6 id="如果你的分支已经乱成一锅粥了，"><a href="#如果你的分支已经乱成一锅粥了，" class="headerlink" title="如果你的分支已经乱成一锅粥了，"></a>如果你的分支已经乱成一锅粥了，</h6><p>ok,直接删除当前本地文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">cd <span class="token punctuation">.</span><span class="token punctuation">.</span>sudo rm <span class="token operator">-</span>r <span class="token operator">&lt;</span>yougitName<span class="token operator">&gt;</span>git clone <span class="token operator">...</span><span class="token comment">//你的仓库地址</span>cd yougit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://www.runoob.com/git/git-basic-operations.html">Git 的基本操作</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrary 对象操作</title>
      <link href="/2021/11/09/Arrary/"/>
      <url>/2021/11/09/Arrary/</url>
      
        <content type="html"><![CDATA[<h3 id="Is-Arrary"><a href="#Is-Arrary" class="headerlink" title="Is Arrary"></a>Is Arrary</h3><p>var a = [];</p><p>// 1.基于instanceof</p><p>a instanceof Array; // true</p><p>// 2.基于constructor</p><p>a.constructor === Array;  //true</p><p>// 3.基于Object.prototype.isPrototypeOf</p><p>Array.prototype.isPrototypeOf(a);</p><p>// 4.基于getPrototypeOf</p><p>Object.getPrototypeOf(a) === Array.prototype;</p><p>// 5.基于Object.prototype.toString</p><p>Object.prototype.toString.apply(a) === ‘[object Array]’;</p><p>//以上，除了Object.prototype.toString外，其它方法都不能正确判断变量的类型。</p><p>最好的方式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不改变原数组</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改变原数组</p><h3 id="Array-构造器"><a href="#Array-构造器" class="headerlink" title="Array 构造器"></a>Array 构造器</h3><p>Array 构造器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用Array构造器</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// [undefined x 8]</span><span class="token comment">// 使用对象字面量</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// [undefined x 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6 新增构造函数：</p><p>Array.of将参数依次转化为数组中的一项，然后返回新数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//单个数字参数处理与Array不同</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [empty × 8]</span><span class="token comment">//单个参数不是数字时，Array.of 与 Array构造器等同</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8, 5]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [8, 5]</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["8"]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["8"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Array.from</strong> 从一个类似数组的可迭代对象创建一个新的数组实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">语法：Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span><span class="token punctuation">,</span>processingFn<span class="token punctuation">[</span><span class="token punctuation">,</span>thisArg<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
